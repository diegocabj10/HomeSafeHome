--SCRIPTS TABLAS
---------------------------------------------------------------------------------------
----------------------------------USUARIOS---------------------------------------------
--------------------------------------------------------------------------------------- 
create table HOMESAFEHOME.T_USUARIOS
(
  ID_USUARIO    NUMBER(10) not null,
  LOGIN         VARCHAR2(30),
  FECHA_INICIO  DATE,
  FECHA_FIN     DATE,
  CUIL          VARCHAR2(12),
  ULTIMO_LOGIN  DATE,
  FECHA_BAJA      DATE
);
alter table HOMESAFEHOME.T_USUARIOS
  add constraint PK_USUARIOS primary key (ID_USUARIO);
alter table HOMESAFEHOME.T_USUARIOS
  add constraint UK_USU_CUIL unique (CUIL);
---------------------------------------------------------------------------------------
----------------------------------SESIONES---------------------------------------------
---------------------------------------------------------------------------------------   
create table HOMESAFEHOME.T_SESIONES
(
  ID_SESION  VARCHAR2(40) not null,
  IP         VARCHAR2(15),
  FECHA_INICIO DATE,
  FECHA_FIN    DATE,
  ID_USUARIO NUMBER(10)
);
alter table HOMESAFEHOME.T_SESIONES
  add constraint PK_SESIONES primary key (ID_SESION);
  alter table T_SESIONES
  add constraint FK_SES_USU foreign key (ID_USUARIO)
  references T_USUARIOS (ID_USUARIO);  
---------------------------------------------------------------------------------------
----------------------------------PROCESO_AUDITORIAS-----------------------------------
--------------------------------------------------------------------------------------- 
create table HOMESAFEHOME.T_AUDITORIAS_PROCESO
(
  ID_AUDITORIA_PROCESO NUMBER(10) not null,
  N_AUDITORIA_PROCESO  VARCHAR2(100),
  DESCRIPCION VARCHAR2(200),
  FECHA_BAJA    DATE
);

alter table HOMESAFEHOME.T_AUDITORIAS_PROCESO
  add constraint PK_AUDITORIAS_PROCESO primary key (ID_AUDITORIA_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------AUDITORIAS-------------------------------------------
---------------------------------------------------------------------------------------  
create table HOMESAFEHOME.T_AUDITORIAS
(
  ID_AUDITORIA  NUMBER(10) not null,
  ID_SESION     VARCHAR2(40),
  FECHA_AUDITORIA       DATE,
  OBSERVACIONES VARCHAR2(4000),
  ID_CLAVE      VARCHAR2(40),
  ID_AUDITORIA_PROCESO   NUMBER(10)
);
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint PK_AUDITORIAS primary key (ID_AUDITORIA);
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint FK_AUD_SES foreign key (ID_SESION)
  references HOMESAFEHOME.T_SESIONES (ID_SESION);  
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint FK_AUD_PROC foreign key (ID_AUDITORIA_PROCESO)
  references HOMESAFEHOME.T_AUDITORIAS_PROCESO (ID_AUDITORIA_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------PERFILES---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PERFILES
(
  ID_PERFIL NUMBER(10) not null,
  N_PERFIL  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_PERFILES
  add constraint PK_PERFIL primary key (ID_PERFIL);
alter table HOMESAFEHOME.T_PERFILES
  add constraint UK_PERFIL unique (N_PERFIL);
---------------------------------------------------------------------------------------
----------------------------------PROCESOS---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PROCESOS
(
  ID_PROCESO    NUMBER(10) not null,
  TIPO          VARCHAR2(2),
  N_PROCESO     VARCHAR2(200),
  FECHA_BAJA      DATE,
  NOMBRE        VARCHAR2(200),
  ORDEN_MENU    NUMBER(3),
  URL           VARCHAR2(100),
  ID_PROCESO_PADRE NUMBER(10)
);
alter table HOMESAFEHOME.T_PROCESOS
  add constraint PK_PROCESOS primary key (ID_PROCESO);
alter table HOMESAFEHOME.T_PROCESOS
  add constraint FK_PROCESO_PADRE foreign key (ID_PROCESO_PADRE)
  references HOMESAFEHOME.T_PROCESOS (ID_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------PERFILES_PROCESO-------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PERFILES_PROCESO
(
  ID_PERFIL_PROCESO NUMBER(10) not null,
  ID_PROCESO   NUMBER(10),
  ID_PERFIL    NUMBER(10)
);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint PK_PERFILES_PROCESO primary key (ID_PERFIL_PROCESO);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint FK_PERFIL_PROCESO foreign key (ID_PROCESO)
  references HOMESAFEHOME.T_PROCESOS (ID_PROCESO);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint FK_PROCESO_PERFIL foreign key (ID_PERFIL)
  references HOMESAFEHOME.T_PERFILES (ID_PERFIL);
---------------------------------------------------------------------------------------
----------------------------------USUARIO_PERFIL---------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_USUARIOS_PERFIL
(
  ID_USUARIO_PERFIL NUMBER(10) not null,
  ID_USUARIO        NUMBER(10),
  ID_PERFIL         NUMBER(10)
);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint PK_USUARIO_PERFIL primary key (ID_USUARIO_PERFIL);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint FK_USUARIO_PERFIL foreign key (ID_PERFIL)
  references HOMESAFEHOME.T_PERFILES (ID_PERFIL);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint FK_PERFIL_USUARIO foreign key (ID_USUARIO)
  references HOMESAFEHOME.T_USUARIOS (ID_USUARIO);
---------------------------------------------------------------------------------------
-------------------------------------TABLE_NUMBER--------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE TYPE HOMESAFEHOME.table_number is table of number
---------------------------------------------------------------------------------------
----------------------------------DISPOSITIVOS-----------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_DISPOSITIVOS
(
  ID_DISPOSITIVO NUMBER(10) not null,
  N_DISPOSITIVO  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_DISPOSITIVOS
  add constraint PK_DISPOSITIVO primary key (ID_DISPOSITIVO);
alter table HOMESAFEHOME.T_DISPOSITIVOS
  add constraint UK_DISPOSITIVO unique (N_DISPOSITIVO);
---------------------------------------------------------------------------------------
----------------------------------SENIALES---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_SENIALES
(
  ID_SENIAL NUMBER(10) not null,
  N_SENIAL  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_SENIALES
  add constraint PK_SENIAL primary key (ID_SENIAL);
alter table HOMESAFEHOME.T_SENIALES
  add constraint UK_SENIAL unique (N_SENIAL);
---------------------------------------------------------------------------------------
----------------------------------EVENTOS----------------------------------------------
---------------------------------------------------------------------------------------CREATE TABLE HOMESAFEHOME.T_EVENTOS (
 ID_EVENTO NUMBER(10) not null,
 FECHA_EVENTO  DATE,
 ID_SENIAL NUMBER(10) not null,
 ID_DISPOSITIVO NUMBER(10) not null,
 VALOR  NUMBER(10),
 FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint PK_EVENTOS primary key (ID_EVENTO);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint FK_EVENTOS_SENIAL foreign key (ID_SENIAL)
  references HOMESAFEHOME.T_SENIALES (ID_SENIAL);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint FK_EVENTOS_DISPOSITIVOS foreign key (ID_DISPOSITIVO)
  references HOMESAFEHOME.T_DISPOSITIVOS (ID_DISPOSITIVO);

--Secuencias
---------------------------------------------------------------------------------------
----------------------------------AUDITORIAS-------------------------------------------
---------------------------------------------------------------------------------------  
create sequence HOMESAFEHOME.SEQ_AUDITORIA
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------SESIONES---------------------------------------------
---------------------------------------------------------------------------------------   
create sequence HOMESAFEHOME.SEQ_SESION
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------USUARIOS---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_USUARIO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PROCESO_AUDITORIAS-----------------------------------
--------------------------------------------------------------------------------------- 
create sequence HOMESAFEHOME.SEQ_AUDITORIA_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PERFILES---------------------------------------------
--------------------------------------------------------------------------------------- 
create sequence HOMESAFEHOME.SEQ_PERFIL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PROCESOS---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PERFILES_PROCESO-------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_PERFIL_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------USUARIO_PERFIL---------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_USUARIO_PERFIL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------DISPOSITIVOS-----------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_DISPOSITIVO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------SENIALES---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_SENIAL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------EVENTOS----------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_EVENTO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;



---Packages
---------------------------------------------------------------------------------------
----------------------------------PKG_ARRAY--------------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_array AS
  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Array de int y varchar2
  TYPE stringtabletype IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
  TYPE inttabletype IS TABLE OF NUMBER(10) INDEX BY BINARY_INTEGER;
  FUNCTION fn_get_table_number(asociativearray IN pkg_array.inttabletype)
    RETURN table_number;
END;

CREATE OR REPLACE PACKAGE BODY homesafehome.pkg_array IS
  FUNCTION fn_get_table_number(asociativearray IN pkg_array.inttabletype)
    RETURN table_number IS
    databasearray table_number := table_number();
  BEGIN
    databasearray.extend(asociativearray.count);
    FOR i IN 1 .. asociativearray.count
    LOOP
      databasearray(i) := asociativearray(i);
    END LOOP;
    RETURN databasearray;
  END;
END pkg_array;

---------------------------------------------------------------------------------------
----------------------------------PKG_AUDITORIA----------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE HOMESAFEHOME.PKG_AUDITORIA AS
  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Auditorias
  FUNCTION check_val(l_new       IN VARCHAR2
                    ,l_old       IN VARCHAR2
                    ,column_name IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION check_val(l_new IN DATE, l_old IN DATE, column_name IN VARCHAR2)
    RETURN VARCHAR2;
  FUNCTION check_val(l_new       IN NUMBER
                    ,l_old       IN NUMBER
                    ,column_name IN VARCHAR2) RETURN VARCHAR2;
END;

CREATE OR REPLACE PACKAGE BODY homesafehome.pkg_auditoria AS

  FUNCTION check_val(l_new       IN VARCHAR2
                    ,l_old       IN VARCHAR2
                    ,column_name IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || l_old || ' -> ' || l_new || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;

  FUNCTION check_val(l_new IN DATE, l_old IN DATE, column_name IN VARCHAR2)
    RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || to_char(l_old, 'dd/mm/yyyy HH24:mi:ss') || ' -> ' || to_char(l_new, 'dd/mm/yyyy HH24:mi:ss') || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;

  FUNCTION check_val(l_new       IN NUMBER
                    ,l_old       IN NUMBER
                    ,column_name IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || l_old || ' -> ' || l_new || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;
END;
---------------------------------------------------------------------------------------
----------------------------------PKG_SEGURIDAD----------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_seguridad IS
  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Seguridad
  id_session VARCHAR2(40);

  FUNCTION fn_id_session RETURN VARCHAR2;

  PROCEDURE pr_items_seguridad_dto_s(p_cursor1 OUT SYS_REFCURSOR
                                    ,p_cursor2 OUT SYS_REFCURSOR
                                    ,p_cursor3 OUT SYS_REFCURSOR
                                    ,p_cursor4 OUT SYS_REFCURSOR);

END pkg_seguridad;

CREATE OR REPLACE PACKAGE BODY pkg_seguridad IS

  FUNCTION fn_id_session RETURN VARCHAR2 IS
    pp_id_session VARCHAR2(40) := id_session;
  BEGIN
    IF id_session IS NULL
    THEN
      SELECT substr(sys_context('userenv', 'terminal', 50) || ' - ' ||
                    sys_context('userenv', 'os_user', 30) || ' - ' || USER, 1, 40)
        INTO pp_id_session
        FROM dual;
    END IF;
    RETURN pp_id_session;
  END;

  PROCEDURE pr_items_seguridad_dto_s(p_cursor1 OUT SYS_REFCURSOR
                                    ,p_cursor2 OUT SYS_REFCURSOR
                                    ,p_cursor3 OUT SYS_REFCURSOR
                                    ,p_cursor4 OUT SYS_REFCURSOR) AS
  BEGIN
    --MenuesHijos
    OPEN p_cursor1 FOR
      SELECT p.id_proceso
            ,p.nombre           nombre
            ,p.url
            ,p.id_proceso_padre id_proceso_padre
        FROM t_procesos p
       WHERE p.tipo = 'H'
         AND p.fecha_baja IS NULL
       ORDER BY p.orden_menu, p.nombre;
    --MenuesPadres
    OPEN p_cursor2 FOR
      SELECT p2.id_proceso, p2.nombre nombre, p2.orden_menu orden
        FROM t_procesos p2
       WHERE p2.tipo = 'P'
         AND p2.fecha_baja IS NULL
       ORDER BY p2.orden_menu, p2.nombre;
    --PerfilesProcesos
    OPEN p_cursor3 FOR
      SELECT id_perfil, id_proceso FROM t_perfiles_proceso pepr;
    --Procesos
    OPEN p_cursor4 FOR
      SELECT p4.id_proceso id, p4.nombre nombre, p4.url
        FROM t_procesos p4
       WHERE p4.tipo <> 'P' -- menues hijos (H) y tareas (T)
         AND p4.fecha_baja IS NULL
       ORDER BY p4.orden_menu, p4.nombre;
  END;

END pkg_seguridad;

---------------------------------------------------------------------------------------
----------------------------------PKG_PERFILES-----------------------------------------
---------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE pkg_perfiles IS

  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Perfiles
  PROCEDURE pr_getcombos(p_procesos OUT SYS_REFCURSOR);

  PROCEDURE pr_getbyid(p_id          IN t_perfiles.id_perfil%TYPE
                      ,p_id_procesos OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR);

  PROCEDURE pr_getall(p_nombre                IN t_perfiles.n_perfil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR);

  PROCEDURE pr_postput(p_id          IN OUT t_perfiles.id_perfil%TYPE
                      ,p_nombre      IN t_perfiles.n_perfil%TYPE
                      ,p_id_procesos IN pkg_array.inttabletype);

  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2);

END pkg_perfiles;


CREATE OR REPLACE PACKAGE BODY pkg_perfiles IS

  PROCEDURE pr_getcombos(p_procesos OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_procesos FOR
      SELECT p.id_proceso id, p.nombre nombre, p.id_proceso_padre idtipo
        FROM t_procesos p
       WHERE p.tipo IN ('H', 'T')
         AND p.fecha_baja IS NULL
       ORDER BY p.id_proceso_padre, p.orden_menu, p.nombre;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getcombos;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getbyid(p_id          IN t_perfiles.id_perfil%TYPE
                      ,p_id_procesos OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR) IS
  BEGIN
    SELECT pp.id_proceso BULK COLLECT
      INTO p_id_procesos
      FROM t_perfiles_proceso pp
     WHERE pp.id_perfil = p_id;
    OPEN p_cursor FOR
      SELECT p.id_perfil id
            ,p.n_perfil nombre
            ,p.fecha_baja fechabaja
            ,CASE
               WHEN p.fecha_baja IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_perfiles p
       WHERE p.id_perfil = p_id;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getbyid;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getall(p_nombre                IN t_perfiles.n_perfil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR) AS
    v_registro_desde NUMBER(10) := (p_numeropaginalistado * 10) - 9;
    v_registro_hasta NUMBER(10) := v_registro_desde + 9;
    v_sql_count      VARCHAR2(4000);
    v_sql_datos      VARCHAR2(4000);
    v_with           VARCHAR2(2000) := 'WITH param as (SELECT :p1 p_nombre, :p2 p_activo FROM dual) ';
    v_where          VARCHAR2(2000);
  BEGIN
    -- contar resultados para el paginado
    v_sql_count := v_with || 'SELECT COUNT(*) FROM t_perfiles t';
    IF p_nombre IS NOT NULL
    THEN
      v_where := v_where ||
                 ' AND t.n_perfil LIKE ''%'' || p_nombre || ''%'' ';
      -- (p_nombre IS NULL OR p.n_perfil LIKE '%' || p_nombre || '%') AND
    END IF;
    IF p_activo = 'SI'
    THEN
      v_where := v_where || ' AND t.fec_baja IS NULL ';
    END IF;
    IF p_activo = 'NO'
    THEN
      v_where := v_where || ' AND t.fec_baja IS NOT NULL ';
    END IF;
    IF (v_where IS NOT NULL)
    THEN
      v_where     := substr(v_where, 5);
      v_where     := ', param where ' || v_where;
      v_sql_count := v_sql_count || v_where;
    END IF;
    EXECUTE IMMEDIATE v_sql_count
      INTO p_totalregistroslistado
      USING p_nombre, p_activo;
    v_sql_datos := v_with || 'SELECT c.id_perfil Id
        ,c.n_perfil nombre
        ,c.fecha_baja fechaBaja
        ,CASE
           WHEN c.fecha_baja IS NULL THEN
            '' SI ''
           ELSE
            '' NO ''
         END activo
FROM (SELECT a.*,rownum rnum FROM ' ||
                   '(SELECT t.* FROM t_perfiles t' || v_where || ' )a ' ||
                   'WHERE rownum <= ' || v_registro_hasta ||
                   ') c WHERE rnum >= ' || v_registro_desde ||
                   ' ORDER BY c.n_perfil';
    OPEN p_cursor FOR v_sql_datos
      USING p_nombre, p_activo;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getall;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_postput(p_id          IN OUT t_perfiles.id_perfil%TYPE
                      ,p_nombre      IN t_perfiles.n_perfil%TYPE
                      ,p_id_procesos IN pkg_array.inttabletype) IS
    ex_empty_array EXCEPTION;
  BEGIN
    IF p_id = 0
    THEN
      -- Alta del perfil
      p_id := seq_perfil.nextval;
      INSERT INTO t_perfiles (id_perfil, n_perfil) VALUES (p_id, p_nombre);
    ELSE
      -- Modificar un perfil existente
      UPDATE t_perfiles p
         SET p.n_perfil = p_nombre
       WHERE p.id_perfil = p_id;
      -- En la modificacion se borrar el conjunto de procesos vinculados a ese perfil
      DELETE FROM t_perfiles_proceso pp WHERE pp.id_perfil = p_id;
    END IF;
    --En alta y modificacion, insertamos los nuevos pefiles del usuario
    IF (p_id_procesos.first IS NULL)
    THEN
      RAISE ex_empty_array;
    ELSE
      -- en alta y modificacion agregamos los procesos
      FOR i IN p_id_procesos.first .. p_id_procesos.last
      LOOP
        INSERT INTO t_perfiles_proceso
          (id_perfil_proceso, id_perfil, id_proceso)
        VALUES
          (seq_perfil_proceso.nextval, p_id, p_id_procesos(i));
      END LOOP;
    END IF;
  EXCEPTION
    WHEN ex_empty_array THEN
      raise_application_error(-20999, 'Debe seleccionar procesos.');
    WHEN dup_val_on_index THEN
      raise_application_error(-20999, 'El perfil ingresado ya existe.');
    WHEN OTHERS THEN
      RAISE;
  END pr_postput;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2) IS
  BEGIN
    UPDATE t_perfiles p
       SET p.fecha_baja = CASE
                            WHEN p_activo_nuevo = 'SI' THEN
                             NULL
                            ELSE
                             SYSDATE
                          END
     WHERE p.id_perfil = p_id;
    -- auditoria?
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_delete;

END pkg_perfiles;


/*********************************************************************************************************/

/*********************************************************************************************************/

/*********************************************************************************************************/

/*********************************************************************************************************/


CREATE OR REPLACE PACKAGE pkg_seniales IS

  CREATE OR REPLACE PROCEDURE pr_seniales_dl(p_id IN t_seniales.id_senial%TYPE,
                                             p_activo_nuevo IN VARCHAR2);

  CREATE OR REPLACE PROCEDURE pr_seniales_g(p_id IN OUT t_seniales.id_senial%TYPE,
                                            p_descripcion IN t_seniales.valor%TYPE);

  CREATE OR REPLACE PROCEDURE pr_seniales_s(p_id IN t_seniales.id_senial%TYPE,
                                            p_cursor OUT SYS_REFCURSOR);

  CREATE OR REPLACE PROCEDURE pr_seniales_sf(p_activo IN OUT VARCHAR2,
                                             p_numeropaginalistado IN NUMBER,
                                             p_totalregistroslistado OUT NUMBER,
                                             p_cursor OUT SYS_REFCURSOR);

  CREATE OR REPLACE PROCEDURE pr_seniales_set(p_cursor_senial OUT SYS_REFCURSOR);

END pkg_seniales;

-----------------Seniales--------------------

CREATE OR REPLACE PACKAGE BODY pkg_seniales IS

  CREATE OR REPLACE PROCEDURE pr_seniales_dl(p_id in t_senial.id_senial%TYPE,
                                                 p_activo_nuevo IN VARCHAR2) AS
    BEGIN
      UPDATE t_seniales d
         SET d.fecha_baja = CASE
                              WHEN p_activo_nuevo = 'SI' THEN
                               NULL
                              ELSE
                               SYSDATE
                            END
       WHERE e.id_senial = p_id;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
  END pr_seniales_dl;

  CREATE OR REPLACE PROCEDURE pr_seniales_g(p_id IN OUT t_seniales.id_senial%TYPE,
                                            p_descripcion IN t_seniales.descripcion%TYPE) AS
    BEGIN

      IF p_id IS NULL THEN  -- alta
        p_id := seq_senial.nextval;
        INSERT INTO t_perfil (id_senial, descripcion) 
               VALUES (p_id, p_descripcion);
      ELSE  -- modificacion
        UPDATE t_seniales s
        SET    s.descripcion = p_descripcion
        WHERE  s.id_senial = p_id;
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
    END;
  END pr_seniales_g;

  CREATE OR REPLACE PROCEDURE pr_seniales_s(p_id IN t_seniales.id_senial%TYPE,
                                            p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    
    OPEN p_cursor FOR
      SELECT s.id_senial id,
             s.descripcion descripcion,
             CASE
               WHEN s.fecha_baja IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_seniales s
       WHERE p.id_senial = p_id;

  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_seniales_s;
  
  CREATE OR REPLACE PROCEDURE pr_seniales_sf(p_activo IN OUT VARCHAR2,
                                             p_numeropaginalistado IN NUMBER,
                                             p_totalregistroslistado OUT NUMBER,
                                             p_cursor OUT SYS_REFCURSOR) AS
      v_registro_desde number(10) := (p_numeropaginalistado * 10) - 9;
      v_registro_hasta number(10) := v_registro_desde + 9;
      v_sql_count      VARCHAR2(4000);
      v_sql_datos      VARCHAR2(4000);
      v_with           varchar2(2000) := 'WITH param as (SELECT :p1 p_activo FROM dual) ';
      v_where          VARCHAR2(2000);
    BEGIN
      -- contar resultados para el paginado

      v_sql_count := v_with || 'SELECT COUNT(*) FROM t_seniales s';

      IF p_activo = 'SI' THEN
        v_where := v_where || ' AND s.fec_baja IS NULL ';
      END IF;
      IF p_activo = 'NO' THEN
        v_where := v_where || ' AND s.fec_baja IS NOT NULL ';
      END IF;

      IF (v_where IS NOT NULL) THEN
        v_where     := substr(v_where, 5);
        v_where     := ', param where ' || v_where;
        v_sql_count := v_sql_count || v_where;
      END IF;

      EXECUTE IMMEDIATE v_sql_count
        INTO p_totalregistroslistado
        USING p_activo;

      v_sql_datos := v_with || 'SELECT s.id_senial Id,
            s.descripcion descripcion,
            s.fecha_baja fechaBaja,
            CASE
               WHEN s.fecha_baja IS NULL THEN
                '' SI ''
               ELSE
                '' NO ''
             END activo
             FROM (SELECT a.*,rownum rnum FROM ' ||
                     '(SELECT se.* FROM t_seniales se' || v_where || ' )a ' ||
                     'WHERE rownum <= ' || v_registro_hasta ||
                     ') c WHERE rownum >= ' || v_registro_desde ||
                     ' ORDER BY c.descripcion';

      OPEN p_cursor FOR v_sql_datos
        USING p_activo;

    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
    END pr_seniales_sf;
    
  CREATE OR REPLACE PROCEDURE pr_seniales_set(p_cursor_senial OUT SYS_REFCURSOR) AS
  
    OPEN p_cursor_senial FOR
        SELECT s.id_senial id, s.descripcion descripcion
        FROM   t_seniales s
        WHERE  s.fecha_baja IS NULL
        ORDER  BY s.descripcion;        
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;               
  END pr_seniales_set;                                  

END pkg_seniales;

-----------------Dispositivos--------------------
CREATE OR REPLACE PACKAGE pkg_dispositivos IS

  CREATE OR REPLACE PROCEDURE pr_dispositivos_dl(p_id IN t_dispositivos.id_dispositivo%TYPE,
                                                 p_activo_nuevo IN VARCHAR2);

  CREATE OR REPLACE PROCEDURE pr_dispositivos_g(p_id IN OUT t_dispositivos.id_dispositivo%TYPE,
                                                p_descripcion IN t_dispositivos.valor%TYPE);

  CREATE OR REPLACE PROCEDURE pr_dispositivos_s(p_id IN t_dispositivos.id_dispositivo%TYPE,
                                                p_cursor OUT SYS_REFCURSOR);

  CREATE OR REPLACE PROCEDURE pr_dispositivos_sf(p_activo IN OUT VARCHAR2,
                                                 p_numeropaginalistado IN NUMBER,
                                                 p_totalregistroslistado OUT NUMBER,
                                                 p_cursor OUT SYS_REFCURSOR);

  CREATE OR REPLACE PROCEDURE pr_dispositivos_set(p_cursor_dispositivo OUT SYS_REFCURSOR);

END pkg_dispositivos;

CREATE OR REPLACE PACKAGE BODY pkg_dispositivos IS

  CREATE OR REPLACE PROCEDURE pr_dispositivos_dl(p_id in t_dispositivo.id_dispositivo%TYPE,
                                                 p_activo_nuevo IN VARCHAR2) AS
    BEGIN
      UPDATE t_dispositivos d
         SET d.fecha_baja = CASE
                              WHEN p_activo_nuevo = 'SI' THEN
                               NULL
                              ELSE
                               SYSDATE
                            END
       WHERE e.id_dispositivo = p_id;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
  END pr_dispositivos_dl;

  CREATE OR REPLACE PROCEDURE pr_dispositivos_g(p_id IN OUT t_dispositivos.id_dispositivo%TYPE,
                                                p_descripcion IN t_dispositivos.descripcion%TYPE) AS
    BEGIN

      IF p_id IS NULL THEN  -- alta
        p_id := seq_dispositivo.nextval;
        INSERT INTO t_perfil (id_dispositivo, descripcion) 
               VALUES (p_id, p_descripcion);
      ELSE  -- modificacion
        UPDATE t_dispositivos e
        SET    e.descripcion = p_descripcion
        WHERE  e.id_dispositivo = p_id;
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
    END;
  END pr_dispositivos_g;

  CREATE OR REPLACE PROCEDURE pr_dispositivos_s(p_id IN t_dispositivos.id_dispositivo%TYPE,
                                                p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    
    OPEN p_cursor FOR
      SELECT e.id_dispositivo id,
             e.descripcion descripcion,
             CASE
               WHEN e.fecha_baja IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_dispositivos e
       WHERE p.id_dispositivo = p_id;

  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_dispositivos_s;
  
  CREATE OR REPLACE PROCEDURE pr_dispositivos_sf(p_activo IN OUT VARCHAR2,
                                                 p_numeropaginalistado IN NUMBER,
                                                 p_totalregistroslistado OUT NUMBER,
                                                 p_cursor OUT SYS_REFCURSOR) AS
      v_registro_desde number(10) := (p_numeropaginalistado * 10) - 9;
      v_registro_hasta number(10) := v_registro_desde + 9;
      v_sql_count      VARCHAR2(4000);
      v_sql_datos      VARCHAR2(4000);
      v_with           varchar2(2000) := 'WITH param as (SELECT :p1 p_activo FROM dual) ';
      v_where          VARCHAR2(2000);
    BEGIN
      -- contar resultados para el paginado

      v_sql_count := v_with || 'SELECT COUNT(*) FROM t_dispositivos d';

      IF p_activo = 'SI' THEN
        v_where := v_where || ' AND d.fec_baja IS NULL ';
      END IF;
      IF p_activo = 'NO' THEN
        v_where := v_where || ' AND d.fec_baja IS NOT NULL ';
      END IF;

      IF (v_where IS NOT NULL) THEN
        v_where     := substr(v_where, 5);
        v_where     := ', param where ' || v_where;
        v_sql_count := v_sql_count || v_where;
      END IF;

      EXECUTE IMMEDIATE v_sql_count
        INTO p_totalregistroslistado
        USING p_activo;

      v_sql_datos := v_with || 'SELECT d.id_dispositivo Id,
            d.descripcion descripcion,
            d.fecha_baja fechaBaja,
            CASE
               WHEN d.fecha_baja IS NULL THEN
                '' SI ''
               ELSE
                '' NO ''
             END activo
             FROM (SELECT a.*,rownum rnum FROM ' ||
                     '(SELECT di.* FROM t_dispositivos di' || v_where || ' )a ' ||
                     'WHERE rownum <= ' || v_registro_hasta ||
                     ') c WHERE rownum >= ' || v_registro_desde ||
                     ' ORDER BY c.descripcion';

      OPEN p_cursor FOR v_sql_datos
        USING p_activo;

    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
    END pr_dispositivos_sf;

  CREATE OR REPLACE PROCEDURE pr_dispositivos_set(p_cursor_senial OUT SYS_REFCURSOR) AS
    OPEN p_cursor_dispositivo FOR
        SELECT d.id_dispositivo id, d.descripcion descripcion
        FROM   t_dispositivos d
        WHERE  d.fecha_baja IS NULL
        ORDER  BY d.descripcion;
        
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;               
  END pr_dispositivos_set;                                  

END pkg_dispositivos;

-----------------Eventos--------------------
CREATE OR REPLACE PACKAGE pkg_eventos IS

  CREATE OR REPLACE PROCEDURE pr_eventos_dl(p_id IN t_eventos.id_evento%TYPE,
                                            p_activo_nuevo IN VARCHAR2);

  CREATE OR REPLACE PROCEDURE pr_eventos_g(p_id IN OUT t_eventos.id_evento%TYPE,
                                           p_valor IN t_eventos.valor%TYPE,
                                           p_id_dispositivo IN t_eventos.id_dispositivo%TYPE,
                                           p_id_senial IN t_eventos.id_senial%TYPE);

  CREATE OR REPLACE PROCEDURE pr_eventos_s(p_id IN t_eventos.id_evento%TYPE,
                                           p_id_senial OUT pkg_array.inttabletype,
                                           p_id_dispositivo OUT pkg_array.inttabletype,
                                           p_cursor OUT SYS_REFCURSOR);

  CREATE OR REPLACE PROCEDURE pr_eventos_sf(p_id_dispositivo IN t_eventos.id_dispositivo%TYPE,
                                            p_id_senial IN t_eventos.id_senial%TYPE,
                                            p_activo IN OUT VARCHAR2,
                                            p_numeropaginalistado IN NUMBER,
                                            p_totalregistroslistado OUT NUMBER,
                                            p_cursor OUT SYS_REFCURSOR);
                                            
  CREATE OR REPLACE PROCEDURE pr_eventos_set(p_cursor_senial OUT SYS_REFCURSOR,
                                             p_cursor_dispositivo OUT SYS_REFCURSOR);
                                           
END pkg_eventos;

CREATE OR REPLACE PACKAGE BODY pkg_eventos IS

  CREATE OR REPLACE PROCEDURE pr_eventos_dl(p_id in t_evento.id_evento%TYPE,
                                            p_activo_nuevo IN VARCHAR2) AS
    BEGIN
      UPDATE t_eventos e
         SET e.fecha_baja = CASE
                              WHEN p_activo_nuevo = 'SI' THEN
                               NULL
                              ELSE
                               SYSDATE
                            END
       WHERE e.id_evento = p_id;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
  END pr_eventos_dl;

  CREATE OR REPLACE PROCEDURE pr_eventos_g(p_id          IN OUT t_evento.id_evento%TYPE,
                                           p_valor      IN t_evento.valor%TYPE,
                                           p_id_dispositivo IN t_evento.id_dispositivo%TYPE,
                                           p_id_senial  IN t_evento.id_senial%TYPE,
                                           p_id_Procesos IN pkg_array.inttabletype) IS
      ex_empty_array EXCEPTION;
    BEGIN

      IF p_id IS NULL THEN  -- alta
        p_id := seq_evento.nextval;
        INSERT INTO t_perfil (id_evento, fecha, valor, id_dispositivo, id_senial) 
               VALUES (p_id, SYSDATE, p_valor, p_id_dispositivo, p_id_senial);
      ELSE  -- modificacion
        UPDATE t_eventos e
        SET    e.valor = p_valor,
               e.id_dispositivo = p_id_dispositivo,
               e.id_senial = p_id_senial
        WHERE  e.id_evento = p_id;
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
    END;
  END pr_eventos_g;

  CREATE OR REPLACE PROCEDURE pr_eventos_s(p_id             IN t_eventos.id_evento%TYPE,
                                           p_id_senial      OUT pkg_array.inttabletype,
                                           p_id_dispositivo OUT pkg_array.inttabletype,
                                           p_cursor         OUT SYS_REFCURSOR) AS
  BEGIN

    SELECT e.id_senial BULK COLLECT
      INTO p_id_senial
      FROM t_eventos e
     WHERE e.id_evento = p_id;

    SELECT e.id_dispositivo BULK COLLECT
      INTO p_id_dispositivo
      FROM t_eventos e
     WHERE e.id_evento = p_id;

    OPEN p_cursor FOR
      SELECT e.id_evento id,
             e.id_senial idSenial,
             e.id_dispositivo idDispositivo,
             e.fec_baja fechabaja,
             CASE
               WHEN e.fec_baja IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_eventos e
       WHERE p.id_evento = p_id;

  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_eventos_s;
  
  CREATE OR REPLACE PROCEDURE pr_eventos_sf(p_id_dispositivo        IN t_eventos.id_dispositivo%TYPE,
                                            p_id_senial             IN t_eventos.id_senial%TYPE,
                                            p_activo                IN OUT VARCHAR2,
                                            p_numeropaginalistado   IN NUMBER,
                                            p_totalregistroslistado OUT NUMBER,
                                            p_cursor                OUT SYS_REFCURSOR) AS
  v_registro_desde number(10) := (p_numeropaginalistado * 10) - 9;
  v_registro_hasta number(10) := v_registro_desde + 9;
  v_sql_count      VARCHAR2(4000);
  v_sql_datos      VARCHAR2(4000);
  v_with           varchar2(2000) := 'WITH param as (SELECT :p1 p_id_dispositivo, :p2 p_id_senial, p3: p_activo FROM dual) ';
  v_where          VARCHAR2(2000);
BEGIN
  -- contar resultados para el paginado

  v_sql_count := v_with || 'SELECT COUNT(*) FROM t_eventos e';

  IF p_id_dispositivo <> 0 THEN
    v_where := v_where || ' AND e.p_id_dispositivo = ' || p_id_dispositivo;
  END IF;
  
  IF p_id_senial <> 0 THEN
    v_where := v_where || ' AND e.p_id_senial = ' || p_id_senial;
  END IF;

  IF p_activo = 'SI' THEN
    v_where := v_where || ' AND p.fec_baja IS NULL ';
  END IF;
  IF p_activo = 'NO' THEN
    v_where := v_where || ' AND p.fec_baja IS NOT NULL ';
  END IF;

  IF (v_where IS NOT NULL) THEN
    v_where     := substr(v_where, 5);
    v_where     := ', param where ' || v_where;
    v_sql_count := v_sql_count || v_where;
  END IF;

  EXECUTE IMMEDIATE v_sql_count
    INTO p_totalregistroslistado
    USING p_id_dispositivo, p_id_senial, p_activo;

  v_sql_datos := v_with || 'SELECT e.id_evento Id,
        e.fecha fecha,
        e.valor valor,
        e.id_dispositivo idDispositivo,
        e.id_senial idSenial,
        e.fecha_baja fechaBaja,
        CASE
           WHEN e.fecha_baja IS NULL THEN
            '' SI ''
           ELSE
            '' NO ''
         END activo
         FROM (SELECT a.*,rownum rnum FROM ' ||
                 '(SELECT ev.* FROM t_eventos ev' || v_where || ' )a ' ||
                 'WHERE rownum <= ' || v_registro_hasta ||
                 ') c WHERE rnum >= ' || v_registro_desde ||
                 ' ORDER BY c.fecha desc';

  OPEN p_cursor FOR v_sql_datos
    USING p_id_dispositivo, p_id_senial, p_activo;

EXCEPTION
  WHEN OTHERS THEN
    RAISE;
END pr_eventos_sf;

  CREATE OR REPLACE PROCEDURE pr_eventos_set(p_cursor_senial OUT SYS_REFCURSOR,
                                             p_cursor_dispositivo OUT SYS_REFCURSOR) AS
    pkg_dispositivos.pr_eventos_set(p_cursor_senial);
    pkg_dispositivos.pr_dispositivos_set(p_cursor_dispositivo);
    /*OPEN p_cursor_senial FOR
        SELECT s.id_senial id, s.descripcion descripcion
        FROM   t_seniales s
        WHERE  s.fecha_baja IS NULL
        ORDER  BY s.descripcion;OPEN p_cursor_senial FOR
        SELECT d.id_dispositivo id, d.descripcion descripcion
        FROM   t_dispositivos d
        WHERE  d.fecha_baja IS NULL
        ORDER  BY d.descripcion;*/
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;               
  END pr_eventos_set;                                  

END pkg_eventos;
/
