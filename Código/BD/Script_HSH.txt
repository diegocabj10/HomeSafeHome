--SCRIPTS TABLAS
---------------------------------------------------------------------------------------
----------------------------------USUARIOS---------------------------------------------
--------------------------------------------------------------------------------------- 
create table HOMESAFEHOME.T_USUARIOS
(
  ID_USUARIO    NUMBER(10) not null,
  LOGIN         VARCHAR2(30),
  FECHA_INICIO  DATE,
  FECHA_FIN     DATE,
  CUIL          VARCHAR2(12),
  ULTIMO_LOGIN  DATE,
  FECHA_BAJA      DATE
);
alter table HOMESAFEHOME.T_USUARIOS
  add constraint PK_USUARIOS primary key (ID_USUARIO);
alter table HOMESAFEHOME.T_USUARIOS
  add constraint UK_USU_CUIL unique (CUIL);
---------------------------------------------------------------------------------------
----------------------------------SESIONES---------------------------------------------
---------------------------------------------------------------------------------------   
create table HOMESAFEHOME.T_SESIONES
(
  ID_SESION  VARCHAR2(40) not null,
  IP         VARCHAR2(15),
  FECHA_INICIO DATE,
  FECHA_FIN    DATE,
  ID_USUARIO NUMBER(10)
);
alter table HOMESAFEHOME.T_SESIONES
  add constraint PK_SESIONES primary key (ID_SESION);
  alter table T_SESIONES
  add constraint FK_SES_USU foreign key (ID_USUARIO)
  references T_USUARIOS (ID_USUARIO);  
---------------------------------------------------------------------------------------
----------------------------------PROCESO_AUDITORIAS-----------------------------------
--------------------------------------------------------------------------------------- 
create table HOMESAFEHOME.T_AUDITORIAS_PROCESO
(
  ID_AUDITORIA_PROCESO NUMBER(10) not null,
  N_AUDITORIA_PROCESO  VARCHAR2(100),
  DESCRIPCION VARCHAR2(200),
  FECHA_BAJA    DATE
);

alter table HOMESAFEHOME.T_AUDITORIAS_PROCESO
  add constraint PK_AUDITORIAS_PROCESO primary key (ID_AUDITORIA_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------AUDITORIAS-------------------------------------------
---------------------------------------------------------------------------------------  
create table HOMESAFEHOME.T_AUDITORIAS
(
  ID_AUDITORIA  NUMBER(10) not null,
  ID_SESION     VARCHAR2(40),
  FECHA_AUDITORIA       DATE,
  OBSERVACIONES VARCHAR2(4000),
  ID_CLAVE      VARCHAR2(40),
  ID_AUDITORIA_PROCESO   NUMBER(10)
);
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint PK_AUDITORIAS primary key (ID_AUDITORIA);
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint FK_AUD_SES foreign key (ID_SESION)
  references HOMESAFEHOME.T_SESIONES (ID_SESION);  
alter table HOMESAFEHOME.T_AUDITORIAS
  add constraint FK_AUD_PROC foreign key (ID_AUDITORIA_PROCESO)
  references HOMESAFEHOME.T_AUDITORIAS_PROCESO (ID_AUDITORIA_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------PERFILES---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PERFILES
(
  ID_PERFIL NUMBER(10) not null,
  N_PERFIL  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_PERFILES
  add constraint PK_PERFIL primary key (ID_PERFIL);
alter table HOMESAFEHOME.T_PERFILES
  add constraint UK_PERFIL unique (N_PERFIL);
---------------------------------------------------------------------------------------
----------------------------------PROCESOS---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PROCESOS
(
  ID_PROCESO    NUMBER(10) not null,
  TIPO          VARCHAR2(2),
  N_PROCESO     VARCHAR2(200),
  FECHA_BAJA      DATE,
  NOMBRE        VARCHAR2(200),
  ORDEN_MENU    NUMBER(3),
  URL           VARCHAR2(100),
  ID_PROCESO_PADRE NUMBER(10)
);
alter table HOMESAFEHOME.T_PROCESOS
  add constraint PK_PROCESOS primary key (ID_PROCESO);
alter table HOMESAFEHOME.T_PROCESOS
  add constraint FK_PROCESO_PADRE foreign key (ID_PROCESO_PADRE)
  references HOMESAFEHOME.T_PROCESOS (ID_PROCESO);
---------------------------------------------------------------------------------------
----------------------------------PERFILES_PROCESO-------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_PERFILES_PROCESO
(
  ID_PERFIL_PROCESO NUMBER(10) not null,
  ID_PROCESO   NUMBER(10),
  ID_PERFIL    NUMBER(10)
);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint PK_PERFILES_PROCESO primary key (ID_PERFIL_PROCESO);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint FK_PERFIL_PROCESO foreign key (ID_PROCESO)
  references HOMESAFEHOME.T_PROCESOS (ID_PROCESO);
alter table HOMESAFEHOME.T_PERFILES_PROCESO
  add constraint FK_PROCESO_PERFIL foreign key (ID_PERFIL)
  references HOMESAFEHOME.T_PERFILES (ID_PERFIL);
---------------------------------------------------------------------------------------
----------------------------------USUARIO_PERFIL---------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_USUARIOS_PERFIL
(
  ID_USUARIO_PERFIL NUMBER(10) not null,
  ID_USUARIO        NUMBER(10),
  ID_PERFIL         NUMBER(10)
);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint PK_USUARIO_PERFIL primary key (ID_USUARIO_PERFIL);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint FK_USUARIO_PERFIL foreign key (ID_PERFIL)
  references HOMESAFEHOME.T_PERFILES (ID_PERFIL);
alter table HOMESAFEHOME.T_USUARIO_PERFIL
  add constraint FK_PERFIL_USUARIO foreign key (ID_USUARIO)
  references HOMESAFEHOME.T_USUARIOS (ID_USUARIO);
---------------------------------------------------------------------------------------
-------------------------------------TABLE_NUMBER--------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE TYPE HOMESAFEHOME.table_number is table of number
---------------------------------------------------------------------------------------
----------------------------------DISPOSITIVOS-----------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_DISPOSITIVOS
(
  ID_DISPOSITIVO NUMBER(10) not null,
  N_DISPOSITIVO  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_DISPOSITIVOS
  add constraint PK_DISPOSITIVO primary key (ID_DISPOSITIVO);
alter table HOMESAFEHOME.T_DISPOSITIVOS
  add constraint UK_DISPOSITIVO unique (N_DISPOSITIVO);
---------------------------------------------------------------------------------------
----------------------------------SENIALES---------------------------------------------
---------------------------------------------------------------------------------------
create table HOMESAFEHOME.T_SENIALES
(
  ID_SENIAL NUMBER(10) not null,
  N_SENIAL  VARCHAR2(200),
  FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_SENIALES
  add constraint PK_SENIAL primary key (ID_SENIAL);
alter table HOMESAFEHOME.T_SENIALES
  add constraint UK_SENIAL unique (N_SENIAL);
---------------------------------------------------------------------------------------
----------------------------------EVENTOS----------------------------------------------
---------------------------------------------------------------------------------------CREATE TABLE HOMESAFEHOME.T_EVENTOS (
 ID_EVENTO NUMBER(10) not null,
 FECHA_EVENTO  DATE,
 ID_SENIAL NUMBER(10) not null,
 ID_DISPOSITIVO NUMBER(10) not null,
 VALOR  NUMBER(10),
 FECHA_BAJA  DATE
);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint PK_EVENTOS primary key (ID_EVENTO);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint FK_EVENTOS_SENIAL foreign key (ID_SENIAL)
  references HOMESAFEHOME.T_SENIALES (ID_SENIAL);
alter table HOMESAFEHOME.T_EVENTOS
  add constraint FK_EVENTOS_DISPOSITIVOS foreign key (ID_DISPOSITIVO)
  references HOMESAFEHOME.T_DISPOSITIVOS (ID_DISPOSITIVO);

--Secuencias
---------------------------------------------------------------------------------------
----------------------------------AUDITORIAS-------------------------------------------
---------------------------------------------------------------------------------------  
create sequence HOMESAFEHOME.SEQ_AUDITORIA
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------SESIONES---------------------------------------------
---------------------------------------------------------------------------------------   
create sequence HOMESAFEHOME.SEQ_SESION
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------USUARIOS---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_USUARIO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PROCESO_AUDITORIAS-----------------------------------
--------------------------------------------------------------------------------------- 
create sequence HOMESAFEHOME.SEQ_AUDITORIA_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PERFILES---------------------------------------------
--------------------------------------------------------------------------------------- 
create sequence HOMESAFEHOME.SEQ_PERFIL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PROCESOS---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------PERFILES_PROCESO-------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_PERFIL_PROCESO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------USUARIO_PERFIL---------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_USUARIO_PERFIL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------DISPOSITIVOS-----------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_DISPOSITIVO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------SENIALES---------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_SENIAL
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;
---------------------------------------------------------------------------------------
----------------------------------EVENTOS----------------------------------------------
---------------------------------------------------------------------------------------
create sequence HOMESAFEHOME.SEQ_EVENTO
minvalue 1
maxvalue 9999999999
start with 1
increment by 1;



---Packages
---------------------------------------------------------------------------------------
----------------------------------PKG_ARRAY--------------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_array AS
  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Array de int y varchar2
  TYPE stringtabletype IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
  TYPE inttabletype IS TABLE OF NUMBER(10) INDEX BY BINARY_INTEGER;
  FUNCTION fn_get_table_number(asociativearray IN pkg_array.inttabletype)
    RETURN table_number;
END;

CREATE OR REPLACE PACKAGE BODY homesafehome.pkg_array IS
  FUNCTION fn_get_table_number(asociativearray IN pkg_array.inttabletype)
    RETURN table_number IS
    databasearray table_number := table_number();
  BEGIN
    databasearray.extend(asociativearray.count);
    FOR i IN 1 .. asociativearray.count
    LOOP
      databasearray(i) := asociativearray(i);
    END LOOP;
    RETURN databasearray;
  END;
END pkg_array;

---------------------------------------------------------------------------------------
----------------------------------PKG_AUDITORIA----------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE HOMESAFEHOME.PKG_AUDITORIA AS
  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Auditorias
  FUNCTION check_val(l_new       IN VARCHAR2
                    ,l_old       IN VARCHAR2
                    ,column_name IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION check_val(l_new IN DATE, l_old IN DATE, column_name IN VARCHAR2)
    RETURN VARCHAR2;
  FUNCTION check_val(l_new       IN NUMBER
                    ,l_old       IN NUMBER
                    ,column_name IN VARCHAR2) RETURN VARCHAR2;
END;

CREATE OR REPLACE PACKAGE BODY homesafehome.pkg_auditoria AS

  FUNCTION check_val(l_new       IN VARCHAR2
                    ,l_old       IN VARCHAR2
                    ,column_name IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || l_old || ' -> ' || l_new || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;

  FUNCTION check_val(l_new IN DATE, l_old IN DATE, column_name IN VARCHAR2)
    RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || to_char(l_old, 'dd/mm/yyyy HH24:mi:ss') || ' -> ' || to_char(l_new, 'dd/mm/yyyy HH24:mi:ss') || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;

  FUNCTION check_val(l_new       IN NUMBER
                    ,l_old       IN NUMBER
                    ,column_name IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (l_new <> l_old OR (l_new IS NULL AND l_old IS NOT NULL) OR
       (l_new IS NOT NULL AND l_old IS NULL))
    THEN
      RETURN column_name || ': ' || l_old || ' -> ' || l_new || ' ';
    ELSE
      RETURN NULL;
    END IF;
  END;
END;
---------------------------------------------------------------------------------------
----------------------------------PKG_SEGURIDAD----------------------------------------
---------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE pkg_seguridad IS

  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Modulo seguridad
  --Valor de la session o token que utiliza el usuario conectado en ese momento
  id_session VARCHAR2(40);

  --Funcion que devuelve el valor de la session
  FUNCTION fn_id_session RETURN VARCHAR2;

  --Devuelve cursores necesarios para crear el menu dinamicamente
  PROCEDURE pr_items_seguridad_dto_s(p_cursor1 OUT SYS_REFCURSOR
                                    ,p_cursor2 OUT SYS_REFCURSOR
                                    ,p_cursor3 OUT SYS_REFCURSOR
                                    ,p_cursor4 OUT SYS_REFCURSOR);

  --Registra en la tabla t_sesiones el login del usuario
  PROCEDURE pr_usuarios_login(p_cuil       IN t_usuarios.cuil%TYPE
                             ,p_id_sesion  IN t_sesiones.id_sesion%TYPE
                             ,p_ip         IN t_sesiones.ip%TYPE
                             ,p_id_usuario OUT t_usuarios.id_usuario%TYPE
                             ,p_cursor     OUT SYS_REFCURSOR);

  --Registra en la tabla t_sesiones el logout del usuario
  PROCEDURE pr_usuarios_logout(p_id_sesion       IN t_sesiones.id_sesion%TYPE
                              ,p_timeout_minutos IN NUMBER);

END pkg_seguridad;

CREATE OR REPLACE PACKAGE BODY pkg_seguridad IS

  -------------------------------------------------------------------------------------------------------------------------------
  FUNCTION fn_id_session RETURN VARCHAR2 IS
    pp_id_session VARCHAR2(40) := id_session;
  BEGIN
    IF id_session IS NULL
    THEN
      SELECT substr(sys_context('userenv', 'terminal', 50) || ' - ' ||
                    sys_context('userenv', 'os_user', 30) || ' - ' || USER, 1, 40)
        INTO pp_id_session
        FROM dual;
    END IF;
    RETURN pp_id_session;
  END;

  -------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_items_seguridad_dto_s(p_cursor1 OUT SYS_REFCURSOR
                                    ,p_cursor2 OUT SYS_REFCURSOR
                                    ,p_cursor3 OUT SYS_REFCURSOR
                                    ,p_cursor4 OUT SYS_REFCURSOR) AS
  BEGIN
    --MenuesHijos
    OPEN p_cursor1 FOR
      SELECT p.id_proceso
            ,p.nombre           nombre
            ,p.url
            ,p.id_proceso_padre id_proceso_padre
        FROM t_procesos p
       WHERE p.tipo = 'H'
         AND p.fecha_baja IS NULL
       ORDER BY p.orden_menu, p.nombre;
    --MenuesPadres
    OPEN p_cursor2 FOR
      SELECT p2.id_proceso, p2.nombre nombre, p2.orden_menu orden
        FROM t_procesos p2
       WHERE p2.tipo = 'P'
         AND p2.fecha_baja IS NULL
       ORDER BY p2.orden_menu, p2.nombre;
    --PerfilesProcesos
    OPEN p_cursor3 FOR
      SELECT id_perfil, id_proceso FROM t_perfiles_proceso pepr;
    --Procesos
    OPEN p_cursor4 FOR
      SELECT p4.id_proceso id, p4.nombre nombre, p4.url
        FROM t_procesos p4
       WHERE p4.tipo <> 'P' -- menues hijos (H) y tareas (T)
         AND p4.fecha_baja IS NULL
       ORDER BY p4.orden_menu, p4.nombre;
  END;

  ----------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_usuarios_login(p_cuil       IN t_usuarios.cuil%TYPE
                             ,p_id_sesion  IN t_sesiones.id_sesion%TYPE
                             ,p_ip         IN t_sesiones.ip%TYPE
                             ,p_id_usuario OUT t_usuarios.id_usuario%TYPE
                             ,p_cursor     OUT SYS_REFCURSOR) AS
  BEGIN
    --Obtiene el id_usuario a traves del cuil
    SELECT u.id_usuario
      INTO p_id_usuario
      FROM t_usuarios u
     WHERE u.cuil = p_cuil
       AND nvl(u.fecha_fin, SYSDATE + 1) > SYSDATE;
    --Actualiza el ultimo login del usuario
    UPDATE t_usuarios u
       SET u.ultimo_login = SYSDATE
     WHERE u.id_usuario = p_id_usuario;
    --Inserta en t_sesiones
    INSERT INTO t_sesiones
      (id_sesion, ip, fecha_inicio, id_usuario)
    VALUES
      (p_id_sesion, p_ip, SYSDATE, p_id_usuario);
    --Devuelve un cursor con los perfiles del usuario
    OPEN p_cursor FOR
      SELECT p.id_perfil id
        FROM t_perfiles p
       INNER JOIN t_usuarios_perfil up
          ON p.id_perfil = up.id_perfil
       WHERE up.id_usuario = p_id_usuario;
  END pr_usuarios_login;

  --------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_usuarios_logout(p_id_sesion       IN t_sesiones.id_sesion%TYPE
                              ,p_timeout_minutos IN NUMBER) AS
  BEGIN
    UPDATE t_sesiones s
       SET s.fecha_fin = CASE
                           WHEN p_timeout_minutos IS NOT NULL
                                AND s.fecha_inicio <
                                SYSDATE -
                                (1 / 24 / 60 * (p_timeout_minutos + 1)) THEN
                            SYSDATE - (1 / 24 / 60 * (p_timeout_minutos + 1))
                           ELSE
                            SYSDATE
                         END
     WHERE s.id_sesion = p_id_sesion
       AND s.fecha_fin IS NULL;
  END pr_usuarios_logout;

-------------------------------------------------------------------------------------------------------------------------
END pkg_seguridad;


---------------------------------------------------------------------------------------
----------------------------------PKG_PERFILES-----------------------------------------
---------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE pkg_perfiles IS

  -- Author  : DIEGO
  -- Created : 3/7/2018 20:33:36
  -- Purpose : Gestionar Perfiles
  PROCEDURE pr_getcombos(p_procesos OUT SYS_REFCURSOR);

  PROCEDURE pr_getbyid(p_id          IN t_perfiles.id_perfil%TYPE
                      ,p_id_procesos OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR);

  PROCEDURE pr_getall(p_nombre                IN t_perfiles.n_perfil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR);

  PROCEDURE pr_postput(p_id          IN OUT t_perfiles.id_perfil%TYPE
                      ,p_nombre      IN t_perfiles.n_perfil%TYPE
                      ,p_id_procesos IN pkg_array.inttabletype);

  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2);

END pkg_perfiles;


CREATE OR REPLACE PACKAGE BODY pkg_perfiles IS

  PROCEDURE pr_getcombos(p_procesos OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_procesos FOR
      SELECT p.id_proceso id, p.nombre nombre, p.id_proceso_padre idtipo
        FROM t_procesos p
       WHERE p.tipo IN ('H', 'T')
         AND p.fecha_baja IS NULL
       ORDER BY p.id_proceso_padre, p.orden_menu, p.nombre;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getcombos;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getbyid(p_id          IN t_perfiles.id_perfil%TYPE
                      ,p_id_procesos OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR) IS
  BEGIN
    SELECT pp.id_proceso BULK COLLECT
      INTO p_id_procesos
      FROM t_perfiles_proceso pp
     WHERE pp.id_perfil = p_id;
    OPEN p_cursor FOR
      SELECT p.id_perfil id
            ,p.n_perfil nombre
            ,p.fecha_baja fechabaja
            ,CASE
               WHEN p.fecha_baja IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_perfiles p
       WHERE p.id_perfil = p_id;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getbyid;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getall(p_nombre                IN t_perfiles.n_perfil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR) AS
    v_registro_desde NUMBER(10) := (p_numeropaginalistado * 10) - 9;
    v_registro_hasta NUMBER(10) := v_registro_desde + 9;
    v_sql_count      VARCHAR2(4000);
    v_sql_datos      VARCHAR2(4000);
    v_with           VARCHAR2(2000) := 'WITH param as (SELECT :p1 p_nombre, :p2 p_activo FROM dual) ';
    v_where          VARCHAR2(2000);
  BEGIN
    -- contar resultados para el paginado
    v_sql_count := v_with || 'SELECT COUNT(*) FROM t_perfiles t';
    IF p_nombre IS NOT NULL
    THEN
      v_where := v_where ||
                 ' AND t.n_perfil LIKE ''%'' || p_nombre || ''%'' ';
      -- (p_nombre IS NULL OR p.n_perfil LIKE '%' || p_nombre || '%') AND
    END IF;
    IF p_activo = 'SI'
    THEN
      v_where := v_where || ' AND t.fec_baja IS NULL ';
    END IF;
    IF p_activo = 'NO'
    THEN
      v_where := v_where || ' AND t.fec_baja IS NOT NULL ';
    END IF;
    IF (v_where IS NOT NULL)
    THEN
      v_where     := substr(v_where, 5);
      v_where     := ', param where ' || v_where;
      v_sql_count := v_sql_count || v_where;
    END IF;
    EXECUTE IMMEDIATE v_sql_count
      INTO p_totalregistroslistado
      USING p_nombre, p_activo;
    v_sql_datos := v_with || 'SELECT c.id_perfil Id
        ,c.n_perfil nombre
        ,c.fecha_baja fechaBaja
        ,CASE
           WHEN c.fecha_baja IS NULL THEN
            '' SI ''
           ELSE
            '' NO ''
         END activo
FROM (SELECT a.*,rownum rnum FROM ' ||
                   '(SELECT t.* FROM t_perfiles t' || v_where || ' )a ' ||
                   'WHERE rownum <= ' || v_registro_hasta ||
                   ') c WHERE rnum >= ' || v_registro_desde ||
                   ' ORDER BY c.n_perfil';
    OPEN p_cursor FOR v_sql_datos
      USING p_nombre, p_activo;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_getall;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_postput(p_id          IN OUT t_perfiles.id_perfil%TYPE
                      ,p_nombre      IN t_perfiles.n_perfil%TYPE
                      ,p_id_procesos IN pkg_array.inttabletype) IS
    ex_empty_array EXCEPTION;
  BEGIN
    IF p_id = 0
    THEN
      -- Alta del perfil
      p_id := seq_perfil.nextval;
      INSERT INTO t_perfiles (id_perfil, n_perfil) VALUES (p_id, p_nombre);
    ELSE
      -- Modificar un perfil existente
      UPDATE t_perfiles p
         SET p.n_perfil = p_nombre
       WHERE p.id_perfil = p_id;
      -- En la modificacion se borrar el conjunto de procesos vinculados a ese perfil
      DELETE FROM t_perfiles_proceso pp WHERE pp.id_perfil = p_id;
    END IF;
    --En alta y modificacion, insertamos los nuevos pefiles del usuario
    IF (p_id_procesos.first IS NULL)
    THEN
      RAISE ex_empty_array;
    ELSE
      -- en alta y modificacion agregamos los procesos
      FOR i IN p_id_procesos.first .. p_id_procesos.last
      LOOP
        INSERT INTO t_perfiles_proceso
          (id_perfil_proceso, id_perfil, id_proceso)
        VALUES
          (seq_perfil_proceso.nextval, p_id, p_id_procesos(i));
      END LOOP;
    END IF;
  EXCEPTION
    WHEN ex_empty_array THEN
      raise_application_error(-20999, 'Debe seleccionar procesos.');
    WHEN dup_val_on_index THEN
      raise_application_error(-20999, 'El perfil ingresado ya existe.');
    WHEN OTHERS THEN
      RAISE;
  END pr_postput;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2) IS
  BEGIN
    UPDATE t_perfiles p
       SET p.fecha_baja = CASE
                            WHEN p_activo_nuevo = 'SI' THEN
                             NULL
                            ELSE
                             SYSDATE
                          END
     WHERE p.id_perfil = p_id;
    -- auditoria?
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_delete;

END pkg_perfiles;


---------------------------------------------------------------------------------------
----------------------------------PKG_USUARIOS-----------------------------------------
---------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE pkg_usuarios IS

  -- Author  : DIEGO
  -- Created : 3/7/2018 21:18:55
  -- Purpose : Gestionar usuarios
  PROCEDURE pr_getcombos(p_perfiles OUT SYS_REFCURSOR);

  PROCEDURE pr_getbyid(p_id          IN t_usuarios.id_usuario%TYPE
                      ,p_id_perfiles OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR);

  PROCEDURE pr_getall(p_cuil                  IN t_usuarios.cuil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR);

  PROCEDURE pr_postput(p_id          IN OUT t_usuarios.id_usuario%TYPE
                      ,p_cuil        IN t_usuarios.cuil%TYPE
                      ,p_id_perfiles IN pkg_array.inttabletype);

  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2);

END pkg_usuarios;

CREATE OR REPLACE PACKAGE BODY pkg_usuarios IS

  PROCEDURE pr_getcombos(p_perfiles OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_perfiles FOR
      SELECT t.id_perfil id, t.n_perfil nombre FROM t_perfiles t;
  END pr_getcombos;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getbyid(p_id          IN t_usuarios.id_usuario%TYPE
                      ,p_id_perfiles OUT pkg_array.inttabletype
                      ,p_cursor      OUT SYS_REFCURSOR) AS
  BEGIN
    --Selecciono todos los perfiles para el usuario determinado por el id
    SELECT up.id_perfil BULK COLLECT
      INTO p_id_perfiles
      FROM t_usuarios_perfil up
     WHERE up.id_usuario = p_id;
    --Selecciono todos los datos para el usuario determinado por el id
    OPEN p_cursor FOR
      SELECT t.id_usuario id
            ,t.fecha_inicio fechainicio
            ,t.fecha_fin fechabaja
            ,t.cuil
            ,t.ultimo_login ultimologin
            ,CASE
               WHEN t.fecha_fin IS NULL THEN
                'SI'
               ELSE
                'NO'
             END activo
        FROM t_usuarios t
       WHERE id_usuario = p_id;
  END pr_getbyid;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_getall(p_cuil                  IN t_usuarios.cuil%TYPE
                     ,p_activo                IN OUT VARCHAR2
                     ,p_numeropaginalistado   IN NUMBER
                     ,p_totalregistroslistado OUT NUMBER
                     ,p_cursor                OUT SYS_REFCURSOR) AS
    v_registro_desde NUMBER(10) := (p_numeropaginalistado * 10) - 9;
    v_registro_hasta NUMBER(10) := v_registro_desde + 9;
    v_sql_count      VARCHAR2(4000);
    v_sql_datos      VARCHAR2(4000);
    v_with           VARCHAR2(2000) := 'WITH param as (SELECT :p1 p_nombre, :p2 p_activo FROM dual) ';
    v_where          VARCHAR2(2000);
  BEGIN
    v_sql_count := v_with || 'SELECT COUNT(*) FROM t_usuarios u';
    IF p_cuil IS NOT NULL
    THEN
      v_where := v_where || ' AND u.cuil LIKE ''%'' || p_nombre || ''%'' ';
    END IF;
    IF p_activo = 'SI'
    THEN
      v_where := v_where || ' AND p.fec_baja IS NULL ';
    END IF;
    IF p_activo = 'NO'
    THEN
      v_where := v_where || ' AND p.fec_baja IS NOT NULL ';
    END IF;
    IF (v_where IS NOT NULL)
    THEN
      v_where     := substr(v_where, 5);
      v_where     := ', param where ' || v_where;
      v_sql_count := v_sql_count || v_where;
    END IF;
    EXECUTE IMMEDIATE v_sql_count
      INTO p_totalregistroslistado
      USING p_cuil, p_activo;
    v_sql_datos := v_with || 'SELECT c.id_usuario id
          ,c.fecha_inicio fechainicio
          ,c.fecha_fin fechabaja
          ,c.cuil
          ,c.ultimo_login ultimologin
          ,CASE
           WHEN c.fec_baja IS NULL THEN
            '' SI ''
           ELSE
            '' NO ''
         END activo
         FROM (SELECT a.*,rownum rnum FROM ' ||
                   '(SELECT t.* FROM t_usuarios' || v_where || ' )a ' ||
                   'WHERE rownum <= ' || v_registro_hasta ||
                   ') c WHERE rnum >= ' || v_registro_desde ||
                   ' ORDER BY c.cuil';
    OPEN p_cursor FOR v_sql_datos
      USING p_cuil, p_activo;
  END pr_getall;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_postput(p_id          IN OUT t_usuarios.id_usuario%TYPE
                      ,p_cuil        IN t_usuarios.cuil%TYPE
                      ,p_id_perfiles IN pkg_array.inttabletype) AS
    ex_empty_array EXCEPTION;
  BEGIN
    IF p_id = 0
    THEN
      --Alta
      p_id := seq_usuario.nextval;
      INSERT INTO t_usuarios
        (id_usuario, fecha_inicio, cuil)
      VALUES
        (p_id, SYSDATE, p_cuil);
    ELSE
      --Modificacion
      UPDATE t_usuarios t SET t.cuil = p_cuil WHERE t.id_usuario = p_id;
      --Se eliminan todos los perfiles del usuario modificado
      DELETE FROM t_usuarios_perfil up WHERE up.id_usuario = p_id;
    END IF;
    IF (p_id_perfiles.first IS NULL)
    THEN
      RAISE ex_empty_array;
    ELSE
      FOR i IN p_id_perfiles.first .. p_id_perfiles.last
      LOOP
        INSERT INTO t_usuarios_perfil
          (id_usuario_perfil, id_usuario, id_perfil)
        VALUES
          (seq_usuario_perfil.nextval, p_id, p_id_perfiles(i));
      END LOOP;
    END IF;
  EXCEPTION
    WHEN ex_empty_array THEN
      raise_application_error(-20999, 'Debe seleccionar perfiles.');
    WHEN dup_val_on_index THEN
      raise_application_error(-20999, 'El perfil ingresado ya existe.');
    WHEN OTHERS THEN
      RAISE;
  END pr_postput;

  --------------------------------------------------------------------------------------------------------------------------------------------
  PROCEDURE pr_delete(p_id           IN t_perfiles.id_perfil%TYPE
                     ,p_activo_nuevo IN VARCHAR2) AS
  BEGIN
    UPDATE t_usuarios p
       SET p.fecha_baja = CASE
                            WHEN p_activo_nuevo = 'SI' THEN
                             NULL
                            ELSE
                             SYSDATE
                          END
     WHERE p.id_usuario = p_id;
    -- auditoria?
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END pr_delete;

END pkg_usuarios;




/*********************************************************************************************************/
FALTA PASAR EL PACKAGE DE EVENTOS
/*********************************************************************************************************/


